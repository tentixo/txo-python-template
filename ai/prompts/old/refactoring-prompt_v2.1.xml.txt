<?xml version="1.0" encoding="UTF-8"?>
<txo_refactoring_guide version="2.0">
  <metadata>
    <purpose>Guide systematic refactoring from TXO v1.x to v2.1</purpose>
    <last_updated>2025-01-15</last_updated>
    <approach>Phase-based migration following dependency order</approach>
  </metadata>

  <pre_refactoring_checklist>
    <item priority="critical">
      BACKUP everything before starting:
      - Git commit current state
      - Copy utils/ to utils_backup/
      - Document any custom modifications
    </item>
    
    <item priority="critical">
      ANALYZE current version:
      - Check for HelpfulError class → v2.x feature
      - Check for TokenRedactionFilter → v2.x feature
      - Check for RateLimiter → v2.x feature
      - Check for nested config structure → v2.1 feature
    </item>
    
    <item priority="high">
      IDENTIFY breaking changes:
      - Config structure: v2.1 uses nested format for rate-limiting
      - All config access must use hard-fail (config['key'] not config.get())
      - MinimalRestAPI → TxoRestAPI class rename
      - save_json() → save() with intelligent type detection
    </item>
  </pre_refactoring_checklist>

  <migration_phases>
    <phase number="1" name="Foundation">
      <description>Update base modules with no dependencies</description>
      <files>
        <file name="exceptions.py">
          Add HelpfulError class
          Add ApiRateLimitError with retry_after
          Remove __slots__ if using dataclass defaults
        </file>
        <file name="path_helpers.py">
          Usually no changes needed
        </file>
        <file name="logger.py">
          Add TokenRedactionFilter class
          Apply filter in _setup_logger method
        </file>
      </files>
      <validation>
        Test HelpfulError displays correctly
        Verify tokens are redacted in logs
      </validation>
    </phase>
    
    <phase number="2" name="Common Utilities">
      <description>Add new shared components</description>
      <files>
        <file name="api_common.py">
          Create if doesn't exist
          Add RateLimiter class
          Add CircuitBreaker class
          Add apply_jitter function
        </file>
      </files>
      <validation>
        Test rate limiter delays correctly
        Test circuit breaker opens/closes
      </validation>
    </phase>
    
    <phase number="3" name="Data Layer">
      <description>Enhance file operations</description>
      <files>
        <file name="load_n_save.py">
          Add DecimalEncoder for JSON
          Make save() detect type from data+extension
          Remove save_json, save_excel methods if present
        </file>
        <file name="config_loader.py">
          Ensure hard-fail philosophy (config['key'])
          Update for nested config structure
        </file>
      </files>
      <validation>
        Test save() with .json, .csv, .xlsx extensions
        Verify Decimal serialization works
      </validation>
    </phase>
    
    <phase number="4" name="API Layer">
      <description>Add resilience features to API clients</description>
      <files>
        <file name="rest_api_helpers.py">
          Rename MinimalRestAPI → TxoRestAPI
          Add SessionManager for connection pooling
          Add _handle_async_operation for 202 support
          Integrate RateLimiter and CircuitBreaker
          Add require_auth parameter
        </file>
        <file name="api_factory.py">
          Update to use nested config structure
          Add _get_rate_limiter function
          Add _get_circuit_breaker function
          Add ApiManager context manager
          Hard-fail config access
        </file>
      </files>
      <validation>
        Test API with rate limiting enabled
        Test 202 Accepted handling
        Test circuit breaker activation
      </validation>
    </phase>
    
    <phase number="5" name="Orchestration">
      <description>Update high-level components</description>
      <files>
        <file name="script_runner.py">
          Ensure parse_args_and_load_config uses hard-fail
          Add require_token parameter
          Improve error messages with HelpfulError
        </file>
      </files>
      <validation>
        Test script initialization
        Verify config validation works
      </validation>
    </phase>
    
    <phase number="6" name="Configuration">
      <description>Update config structure and schema</description>
      <files>
        <file name="org-env-config-schema.json">
          Add nested rate-limiting object
          Add nested circuit-breaker object
          Add async operation timeouts
          Document all new fields
        </file>
        <file name="*-config.json">
          Convert to nested structure:
          - rate-limiting as object
          - circuit-breaker as object
          - Maintain backward compatibility where possible
        </file>
      </files>
      <validation>
        Validate config against updated schema
        Test all scripts still load config
      </validation>
    </phase>
  </migration_phases>

  <breaking_changes>
    <change severity="high">
      Config structure is nested in v2.1:
      OLD: "enable-rate-limiting": true, "rate-limit-per-second": 10
      NEW: "rate-limiting": {"enabled": true, "calls-per-second": 10}
    </change>
    
    <change severity="medium">
      Class rename:
      OLD: MinimalRestAPI
      NEW: TxoRestAPI
    </change>
    
    <change severity="low">
      Method consolidation:
      OLD: save_json(), save_excel(), save_csv()
      NEW: save() - auto-detects from extension
    </change>
    
    <change severity="high">
      Config access philosophy:
      OLD: config.get('key', default) - soft fail
      NEW: config['key'] - hard fail, no silent errors
    </change>
  </breaking_changes>

  <testing_strategy>
    <test name="smoke_test">
      Run try-me-script.py to verify basic functionality
    </test>
    
    <test name="feature_test">
      Run test_v2_features.py to validate all v2.1 features:
      - Token redaction
      - Rate limiting
      - Circuit breaker
      - Intelligent save
      - Async operations
    </test>
    
    <test name="integration_test">
      Run your main scripts with test data:
      - Verify config loads correctly
      - Check API calls work with new features
      - Validate output files are created
    </test>
    
    <test name="regression_test">
      Compare output with v1.x:
      - Same input should produce same output
      - Performance should be similar or better
      - No data loss or corruption
    </test>
  </testing_strategy>

  <rollback_plan>
    <step>If issues arise, restore from backup:
      1. git checkout previous-commit
      2. OR: mv utils_backup utils
      3. Revert config files to v1.x structure
    </step>
  </rollback_plan>

  <post_refactoring>
    <task>Update all scripts to use new patterns:
      - Replace soft-fail config access
      - Use HelpfulError for user errors
      - Remove print() statements
      - Add type hints where missing
    </task>
    
    <task>Update documentation:
      - README.md with v2.1 features
      - Update AI prompts
      - Document breaking changes
      - Create migration guide
    </task>
    
    <task>Clean up:
      - Remove backup files
      - Delete deprecated methods
      - Update .gitignore if needed
    </task>
    
    <task>Tag release:
      git tag -a v2.1.0 -m "Upgraded to TXO v2.1"
      Update version in pyproject.toml
    </task>
  </post_refactoring>

  <common_issues>
    <issue>
      KeyError on config access:
      CAUSE: Switched to hard-fail but key doesn't exist
      FIX: Add missing key to config or use try/except
    </issue>
    
    <issue>
      __slots__ conflict with dataclass:
      CAUSE: Can't use __slots__ with field defaults
      FIX: Remove __slots__ or use __init__ instead
    </issue>
    
    <issue>
      Rate limiter not working:
      CAUSE: Config structure incorrect
      FIX: Use nested format in config
    </issue>
    
    <issue>
      save() method not found:
      CAUSE: Looking for save_json() which was removed
      FIX: Use save() with .json extension
    </issue>
  </common_issues>
</txo_refactoring_guide>