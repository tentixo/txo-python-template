<?xml version="1.0" encoding="UTF-8"?>
<txo_python_template version="1.0">
  <metadata>
    <purpose>Guide AI assistants to generate code following TXO patterns</purpose>
    <last_updated>2025-01-15</last_updated>
  </metadata>

  <assistant_instructions>
    <on_load>
      <message>
        I see you've uploaded the TXO Python Template guide. I'll help you create Python scripts
        that follow TXO patterns. What would you like to build?
        
        Some examples:
        - Fetch data from an API and save to Excel
        - Process multiple files in parallel
        - Transform data between formats
        - Automate API operations
      </message>
    </on_load>
  </assistant_instructions>

  <critical_patterns weight="10">
    <pattern name="mandatory_parameters">
      ALL scripts MUST have org_id and env_type as first two arguments:
      parser.add_argument("org_id", help="Organization ID")
      parser.add_argument("env_type", help="Environment type")
    </pattern>
    
    <pattern name="configuration_injection">
      ALWAYS use parse_args_and_load_config() and pass config dict:
      config = parse_args_and_load_config("Description")
      process_data(config)  # Pass entire config, not individual params
    </pattern>
    
    <pattern name="logger_first">
      EVERY module starts with:
      from utils.logger import setup_logger
      logger = setup_logger()
      NEVER use print()
    </pattern>
    
    <pattern name="path_comment">
      First line of EVERY Python file is a path comment:
      # src/script_name.py
      or
      # utils/helper_name.py
    </pattern>
  </critical_patterns>

  <important_patterns weight="8">
    <pattern name="tuple_context">
      URL builders return (url, context) tuple:
      url, ctx = build_url(...)
      logger.info(f"{ctx} Starting process")
    </pattern>
    
    <pattern name="error_philosophy">
      config['key'] for required configuration (hard fail)
      response.get('key') for optional API data (soft fail)
    </pattern>
    
    <pattern name="path_centralization">
      from utils.path_helpers import get_path
      path = get_path('config', 'file.json')
      NEVER: Path('config/file.json')
    </pattern>
    
    <pattern name="output_naming">
      Output files include org_id, env_type, and UTC:
      f"{org_id}-{env_type}-report_{utc}.xlsx"
    </pattern>
  </important_patterns>

  <standard_patterns weight="6">
    <pattern name="type_hints">
      ALL functions have type hints:
      def process(config: Dict[str, Any]) -> bool:
    </pattern>
    
    <pattern name="docstrings">
      ALL functions have docstrings explaining purpose, args, returns
    </pattern>
    
    <pattern name="result_tracking">
      Use ProcessingResults dataclass for operation tracking
    </pattern>
  </standard_patterns>

  <file_structure>
    <directories>
      src/        - Main scripts with main() function
      utils/      - Helper modules (flat structure)
      config/     - Configuration files
      output/     - Generated output files
      data/       - Input data files
      logs/       - Log files
    </directories>
    
    <naming>
      Python files: snake_case.py
      JSON files: kebab-case.json
      Output files: {org_id}-{env_type}-{purpose}_{UTC}.{ext}
    </naming>
  </file_structure>

  <available_helpers>
    <helper module="utils.script_runner">
      parse_args_and_load_config(description) - Standard initialization
      parse_args_and_load_config_extended(description, extra_args) - With custom args
    </helper>
    
    <helper module="utils.logger">
      setup_logger() - Get configured logger instance
    </helper>
    
    <helper module="utils.load_n_save">
      TxoDataHandler() - File I/O operations
      .load_json(directory, filename)
      .save(data, directory, filename)
    </helper>
    
    <helper module="utils.api_factory">
      create_rest_api(config) - Create REST client
      create_soap_api(config) - Create SOAP client
    </helper>
    
    <helper module="utils.path_helpers">
      get_path(category, filename) - Get file path
    </helper>
    
    <helper module="utils.exceptions">
      ApiOperationError, FileOperationError, ValidationError
    </helper>
  </available_helpers>

  <code_review_rules>
    <if_sees pattern="print(">
      REPLACE with: logger.info() or logger.debug()
    </if_sees>
    
    <if_sees pattern="Path('config/">
      REPLACE with: get_path('config', filename)
    </if_sees>
    
    <if_sees pattern="def func(org_id, env_type">
      REPLACE with: def func(config: Dict[str, Any])
    </if_sees>
    
    <if_sees pattern="open(">
      SUGGEST: Use TxoDataHandler instead
    </if_sees>
  </code_review_rules>

  <script_template>
    ```python
    # src/script_name.py
    """
    Script description
    
    Usage:
        python script_name.py <org_id> <env_type>
    """
    
    from typing import Dict, Any
    from datetime import datetime, timezone
    
    from utils.logger import setup_logger
    from utils.script_runner import parse_args_and_load_config
    from utils.load_n_save import TxoDataHandler
    
    logger = setup_logger()
    data_handler = TxoDataHandler()
    
    def main():
        config = parse_args_and_load_config("Description")
        logger.info(f"Starting for {config['_org_id']}-{config['_env_type']}")
        # Your code here
        
    if __name__ == "__main__":
        main()
    ```
  </script_template>
</txo_python_template>